{"version":3,"sources":["getWeb3.js","components/CommitForm.js","components/RevealForm.js","components/List.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","CommitForm","state","processing","nameRef","React","createRef","componentDidMount","props","account","contract","events","NameCommitted","filter","sender","on","event","nameCommitted","current","value","setState","alert","commitName","preventDefault","methods","commit","send","from","stack","message","onSubmit","this","className","htmlFor","ref","required","id","disabled","type","Component","RevealForm","NameRevealed","nameRevealed","revealName","reveal","List","names","timer","setInterval","loadNames","componentWillUnmount","clearInterval","parseInt","length","call","all","Array","map","_","index","name","key","App","accounts","eth","getAccounts","net","getId","networkId","deployedNetwork","NameRegistryContract","networks","instance","Contract","abi","address","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90a52460.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log('Injected web3 detected.');\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          'http://127.0.0.1:8545'\n        );\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\n\nclass CommitForm extends Component {\n    state = {\n        processing: false\n    };\n\n    nameRef = React.createRef();\n\n    componentDidMount = () => {\n        const { account, contract } = this.props;\n\n        contract.events.NameCommitted({ filter: { sender: account } }).on('data', event => {\n            this.nameCommitted();\n        });\n    };\n\n    nameCommitted = () => {\n        this.nameRef.current.value = '';\n        this.setState({ processing: false });\n        alert('Success!');\n    };\n\n    commitName = async (event) => {\n        event.preventDefault();\n        this.setState({ processing: true });\n\n        const { account, contract } = this.props;\n        try {\n            await contract.methods.commit(this.nameRef.current.value).send({ from: account });\n        } catch (error) {\n            alert('An error occurred: ' + (error.stack || error.message));\n            this.setState({ processing: false });\n        }\n    };\n\n\n    render() {\n        return (\n            <form onSubmit={this.commitName}>\n                <h2>Record</h2>\n                <div className=\"my-3\">\n                    <label htmlFor=\"commit-name\" className=\"form-label\">Your name</label>\n                    <input ref={this.nameRef} required className=\"form-control\" id=\"commit-name\" />\n                </div>\n                <div className=\"text-center\">\n                    <button disabled={this.state.processing} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default CommitForm;\n","import React, { Component } from 'react';\n\nclass RevealForm extends Component {\n    state = {\n        processing: false\n    };\n\n    nameRef = React.createRef();\n\n    componentDidMount = () => {\n        const { account, contract } = this.props;\n\n        contract.events.NameRevealed({ filter: { sender: account } }).on('data', event => {\n            this.nameRevealed();\n        });\n    };\n\n    nameRevealed = () => {\n        this.nameRef.current.value = '';\n        this.setState({ processing: false });\n        alert('Success!');\n    };\n\n    revealName = async (event) => {\n        event.preventDefault();\n        this.setState({ processing: true });\n\n        const { account, contract } = this.props;\n        try {\n            await contract.methods.reveal(this.nameRef.current.value).send({ from: account });\n        } catch (error) {\n            alert('An error occurred: ' + error.message);\n            this.setState({ processing: false });\n        }\n    };\n\n\n    render() {\n        return (\n            <form onSubmit={this.revealName}>\n                <h2>Reveal</h2>\n                <div className=\"my-3\">\n                    <label htmlFor=\"reveal-name\" className=\"form-label\">Your name</label>\n                    <input ref={this.nameRef} required className=\"form-control\" id=\"reveal-name\" />\n                </div>\n                <div className=\"text-center\">\n                    <button disabled={this.state.processing} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default RevealForm;\n","import React, { Component } from 'react';\n\nclass List extends Component {\n    state = {\n        names: [],\n        timer: null,\n    };\n\n    componentDidMount = () => {\n        this.setState({ timer: setInterval(this.loadNames, 100) });\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.state.timer);\n    };\n\n    loadNames = async () => {\n        const { contract } = this.props;\n\n        const length = parseInt(await contract.methods.length().call());\n        const names = await Promise.all(Array.from(Array(length)).map((_, index) => {\n            return contract.methods.names(index).call();\n        }));\n\n        this.setState({ names });\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>List of revealed names</h2>\n                <ul className=\"fs-5\">\n                    {this.state.names.map((name) => {\n                        return <li key={name}>{name}</li>\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport NameRegistryContract from './contracts/NameRegistry.json';\nimport getWeb3 from './getWeb3';\n\nimport './App.css';\n\nimport CommitForm from './components/CommitForm';\nimport RevealForm from './components/RevealForm';\nimport List from './components/List';\n\nclass App extends Component {\n    state = {\n        web3: null,\n        accounts: null,\n        contract: null\n    };\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = NameRegistryContract.networks[networkId];\n            const instance = new web3.eth.Contract(\n                NameRegistryContract.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({ web3, accounts, contract: instance });\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    render() {\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        } \n        return (\n            <div className=\"App mt-3\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col px-4\">\n                            <CommitForm account={this.state.accounts[0]} contract={this.state.contract} />\n                            <RevealForm account={this.state.accounts[0]} contract={this.state.contract} />\n                        </div>\n                        <div className=\"col px-4\">\n                            <List account={this.state.accounts[0]} contract={this.state.contract} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}